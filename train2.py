# -*- coding: utf-8 -*-
"""train2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10hWtS1rATmDTbCnd820SxGGIqzjG0Ihr
"""

from google.colab import drive
drive.mount('/content/drive')

cd '/content/drive/MyDrive/PI_MLProject'

data_path = '/content/drive/MyDrive/PI_MLProject/Data/cats_vs_dogs_small'

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing import image_dataset_from_directory
from PIL import Image
from IPython.display import display
import matplotlib.pyplot as plt
import numpy as np
import os

set_name = 'train'
class_name = "dog"
file_name = 'dog.1.jpg'
file_path = os.path.join(data_path,set_name,class_name,file_name)
print(file_path)

img = Image.open(file_path)
display(img)
img_array = np.array(img)
print(img_array.shape)

training_path = os.path.join(data_path,'train')
training_set = image_dataset_from_directory(training_path,
shuffle=True,
batch_size=32,
image_size=(224, 224),
validation_split = 0.2,
subset = 'training',
seed = 1234,
)
validation_set = image_dataset_from_directory(training_path,
shuffle=True,
batch_size=32,
image_size=(224, 224),
validation_split = 0.2,
subset = 'validation',
seed = 1234,
)

training_set.class_names

class_names = training_set.class_names
plt.figure(figsize=(10, 10))
for images, labels in training_set.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

base_model = keras.applications.DenseNet121(
    include_top=True,
    weights="imagenet",
    input_tensor=None,
    input_shape=None,
    pooling=None,
    classes=1000,
)
base_model.trainable = False

inputs = keras.Input(shape = (224, 224, 3))
x = tf.keras.applications.densenet.preprocess_input(inputs)
x = base_model(x, training=False)
x = keras.layers.Dropout(0.2)(x)
outputs = keras.layers.Dense(1)(x)
model = keras.Model(inputs,outputs)

model.compile(optimizer='adam', loss =
tf.keras.losses.BinaryCrossentropy(from_logits = True),metrics =
keras.metrics.BinaryAccuracy())
model.fit(training_set, epochs = 20, validation_data = validation_set)

json_config = model.to_json()
with open('model_config.json', 'w') as json_file:
  json_file.write(json_config)
model.save_weights('pets_nuevoModelo_transferlearning.h5')